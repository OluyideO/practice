service: int-apps-serverless-node-ts

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs12.x
  logRetentionInDays: 60
  memorySize: 256
  timeout: 180
  reservedConcurrency: 64
  region: eu-central-1
  apiKeys:
    - ${self:provider.stage}-int-apps-serverless-node-ts
  usagePlan:
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "arn:aws:execute-api:${self:provider.region}:*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SAMPLE_TABLE}"
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*
  environment:
    DEBUG: ${self:custom.config.debug}
    SAMPLE_TABLE: int-apps-sample-${self:provider.stage}
  tracing:
    apiGateway: true
    lambda: true

functions:
  app:
    handler: src/index.handler
    description: A sample GET event handler
    events:
      - http:
          path: /
          method: get
          private: true
          cors: true
          documentation:
            summary: "Gets a HTTP 200 OK response"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "A simple object"
                responseModels:
                  application/json: GetSampleResponse

plugins:
  - serverless-domain-manager
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-apigw-logging
  - serverless-plugin-aws-alerts
  - serverless-plugin-log-retention
  - serverless-openapi-documentation

custom:
  config: ${file(./config/${self:provider.stage}.yml)}
  commonConfig: ${file(./config/common.yml)}
  apiGatewayLogFullRequests: ${self:custom.config.apiGatewayLogFullRequests}
  apiGatewayLoggingLevel: ${self:custom.config.apiGatewayLoggingLevel}
  customDomain:
    domainName: ${self:custom.config.domainName}
    stage: ${self:provider.stage}
    certificateName: ${self:custom.config.certificateName}
    createRoute53Record: true
  documentation:
    path: docs/openapi.json
    version: '1'
    title: 'Internal Apps sample application'
    description: 'A general description of this service'
    models:
      - name: GetSampleResponse
        contentType: 'application/json'
        schema: ${file(docs/models/GetSampleResponse.json)}

resources:
  Resources:
    OffersApiRequestValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: '${self:service}-request-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    OrdersApiRequestValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: '${self:service}-request-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    SampleDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:provider.environment.SAMPLE_TABLE}"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expireAt
          Enabled: true
    GatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: "BAD_REQUEST_BODY"
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: "400"
        ResponseTemplates:
          "application/json": "{\"error\":{\"type\":$context.error.messageString, \"code\":\"Client Error\", \"message\":\"$context.error.validationErrorString\"}}"

package:
  exclude:
    - node_modules/aws-sdk
    - .gitignore

Outputs:
  ApiUrl:
    Description: Custom URL of the API endpoint
    Value: https://${self:custom.customDomain.domainName}
